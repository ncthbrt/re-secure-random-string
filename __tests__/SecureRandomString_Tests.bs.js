// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var SecureRandomString = require("../src/SecureRandomString.bs.js");

function $great$great(f, g, x) {
  return Curry._1(g, Curry._1(f, x));
}

function map(f, p) {
  return p.then((function (param) {
                return Promise.resolve(Curry._1(f, param));
              }));
}

function toBeAlphaNumeric($staropt$star) {
  var length = $staropt$star ? $staropt$star[0] : 32;
  var partial_arg = new RegExp("[A-Za-z0-9]{" + (String(length) + "}"));
  var partial_arg$1 = Jest.ExpectJs[/* toMatchRe */15];
  return (function (param) {
      return partial_arg$1(partial_arg, param);
    });
}

function toBeRejected(param) {
  return param[1].then((function () {
                  return Promise.resolve(Jest.fail("Promise should've been rejected"));
                })).catch((function () {
                return Promise.resolve(Jest.pass);
              }));
}

describe("gen", (function () {
        Jest.testPromise(/* None */0, "should be able to be invoked with default arguments", (function () {
                var partial_arg = Jest.ExpectJs[/* toEqual */12];
                var partial_arg$1 = Jest.ExpectJs[/* expect */0];
                var partial_arg$2 = function (param) {
                  return Curry._1(partial_arg$1, param.length);
                };
                return map((function (param) {
                              var param$1 = Curry._1(partial_arg$2, param);
                              return partial_arg(32, param$1);
                            }), SecureRandomString.gen(/* None */0, /* None */0, /* () */0));
              }));
        Jest.testPromise(/* None */0, "should be able to be invoked with custom length", (function () {
                var partial_arg = Jest.ExpectJs[/* toEqual */12];
                var partial_arg$1 = Jest.ExpectJs[/* expect */0];
                var partial_arg$2 = function (param) {
                  return Curry._1(partial_arg$1, param.length);
                };
                return map((function (param) {
                              var param$1 = Curry._1(partial_arg$2, param);
                              return partial_arg(64, param$1);
                            }), SecureRandomString.gen(/* Some */[64], /* None */0, /* () */0));
              }));
        Jest.testPromise(/* None */0, "should be able to be invoked with alphanumericity", (function () {
                var partial_arg = Jest.ExpectJs[/* expect */0];
                return map((function (param) {
                              return toBeAlphaNumeric(/* None */0)(Curry._1(partial_arg, param));
                            }), SecureRandomString.gen(/* None */0, /* Some */[/* true */1], /* () */0));
              }));
        return Jest.testPromise(/* None */0, "should reject on invalid length", (function () {
                      return toBeRejected(Jest.ExpectJs[/* expect */0](SecureRandomString.gen(/* Some */[-64], /* None */0, /* () */0)));
                    }));
      }));

describe("genSync", (function () {
        Jest.test("should be able to be invoked with default arguments", (function () {
                return Jest.ExpectJs[/* toEqual */12](32, Jest.ExpectJs[/* expect */0](SecureRandomString.genSync(/* None */0, /* None */0, /* () */0).length));
              }));
        Jest.test("should be able to be invoked with custom length", (function () {
                return Jest.ExpectJs[/* toEqual */12](64, Jest.ExpectJs[/* expect */0](SecureRandomString.genSync(/* Some */[64], /* None */0, /* () */0).length));
              }));
        return Jest.test("should be able to be invoked with alphanumericity", (function () {
                      return toBeAlphaNumeric(/* None */0)(Jest.ExpectJs[/* expect */0](SecureRandomString.genSync(/* None */0, /* Some */[/* true */1], /* () */0)));
                    }));
      }));

exports.$great$great = $great$great;
exports.map = map;
exports.toBeAlphaNumeric = toBeAlphaNumeric;
exports.toBeRejected = toBeRejected;
/*  Not a pure module */
